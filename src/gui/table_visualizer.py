"""
üé® VISUALIZADOR DE TABLAS PYQT
=============================

M√≥dulo especializado para visualizaci√≥n de tablas con funcionalidad cr√≠tica:
- Colores cyan/amarillo para celdas combinadas
- Sombreado gris para marcadores [valor]
- Combinaci√≥n de celdas (setSpan)

FUNCIONALIDAD CR√çTICA - NO MODIFICAR SIN VALIDAR:
‚úÖ Detecci√≥n de tipos pandas (int64, float64)
‚úÖ Colores: Qt.yellow (n√∫meros), Qt.cyan (texto), Qt.lightGray (marcadores)
‚úÖ Algoritmo de combinaci√≥n de celdas
"""

from PyQt5.QtWidgets import QTableWidgetItem
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QFont  # Para configuraci√≥n de fuentes
import numpy as np  # CR√çTICO: Para tipos pandas (int64, float64)
from ..config.ui_config import get_ui_config, get_headers_for_context, get_color


class TableVisualizer:
    """
    Visualizador especializado de tablas PyQt con funcionalidad cr√≠tica preservada.
    
    Responsabilidades:
    - Llenar tablas del proceso secuencial
    - Aplicar combinaci√≥n de celdas
    - Aplicar colores cr√≠ticos (cyan/amarillo/gris)
    - Manejar tipos de pandas correctamente
    """
    
    def __init__(self, parent_window):
        """
        Inicializar visualizador de tablas con configuraci√≥n centralizada.

        Args:
            parent_window: Referencia a la ventana principal (main.py)
                          Necesaria para acceder a:
                          - self.tabla_proceso
                          - self.datos_crudos
                          - self.table_marcadores, etc.
        """
        self.parent = parent_window

        # Configuraci√≥n centralizada
        self.ui_config = get_ui_config()
        self.colors_config = self.ui_config.get_colors_config()
        self.table_config = self.ui_config.get_table_config()

        print("üé® TableVisualizer inicializado con configuraci√≥n centralizada")
    
    # ========================================
    # M√âTODOS MOVIDOS DESDE main.py
    # ========================================

    def llenar_tabla_proceso(self, dataframe, headers, nombre, aplicar_combinacion=False):
        """
        MOVIDO DESDE main.py l√≠neas 675-710
        Llenar la tabla del proceso secuencial con configuraci√≥n optimizada por paso
        """
        print(f"   üìã Mostrando {nombre}...")

        # Validar que dataframe no sea None
        if dataframe is None:
            print(f"‚ùå Error: dataframe es None para {nombre}")
            return

        # Configurar dimensiones
        filas, columnas = dataframe.shape
        self.parent.tabla_proceso.setRowCount(filas)
        self.parent.tabla_proceso.setColumnCount(columnas)

        # Configurar encabezados
        self.parent.tabla_proceso.setHorizontalHeaderLabels(headers[:columnas])

        # Limpiar combinaciones anteriores
        self.parent.tabla_proceso.clearSpans()

        # üé® CONFIGURACI√ìN ESPEC√çFICA POR PASO
        self._configurar_por_paso(nombre)

        # Llenar datos con optimizaci√≥n para Paso 2
        for i in range(filas):
            for j in range(columnas):
                valor = dataframe.iloc[i, j]

                # üîß OPTIMIZACI√ìN PARA PASO 2: Truncar valores repetidos
                texto_mostrar = self._optimizar_texto_celda(valor, nombre)
                item = QTableWidgetItem(texto_mostrar)

                # üé® ALINEACI√ìN PROFESIONAL - Centrar todos los valores
                item.setTextAlignment(Qt.AlignCenter)

                # üé® COLORES CR√çTICOS: Aplicar con m√°xima prioridad
                if isinstance(valor, str) and valor.startswith('[') and valor.endswith(']'):
                    # CR√çTICO: Sombreado gris para marcadores [valor] usando configuraci√≥n centralizada
                    from PyQt5.QtGui import QColor
                    color_hex = self.colors_config['marker_background']
                    item.setBackground(QColor(color_hex))
                    # FORZAR con stylesheet individual para m√°xima prioridad
                    item.setData(Qt.UserRole + 1, "gray_marker")  # Marcar para identificar
                    # Tooltip con valor completo para celdas truncadas
                    if len(str(valor)) > 15:
                        item.setToolTip(str(valor))

                self.parent.tabla_proceso.setItem(i, j, item)

        # Aplicar combinaci√≥n si es necesario
        if aplicar_combinacion:
            self.aplicar_combinacion_celdas_proceso(dataframe)

        # Ajustar columnas seg√∫n el paso
        self._ajustar_columnas_por_paso(nombre)

        # üé® APLICAR COLORES CR√çTICOS AL FINAL (m√°xima prioridad)
        self._aplicar_colores_criticos_finales()

        print(f"   ‚úÖ {nombre} mostrado: {filas}x{columnas}")

    def aplicar_combinacion_celdas_proceso(self, dataframe):
        """
        MOVIDO DESDE main.py l√≠neas 684-729 - M√âTODO CR√çTICO
        Aplicar combinaci√≥n de celdas en la tabla del proceso

        ‚ö†Ô∏è FUNCIONALIDAD CR√çTICA:
        - Colores cyan/amarillo para celdas combinadas
        - Detecci√≥n correcta de tipos pandas
        - Algoritmo de combinaci√≥n de celdas
        """
        print("   üîó Aplicando combinaci√≥n de celdas en proceso...")

        # Usar datos originales (con marcadores) para saber qu√© combinar
        datos_originales = self.parent.datos_crudos

        for i in range(len(datos_originales)):
            j = 0
            while j < len(datos_originales.columns):
                valor_original = datos_originales.iloc[i, j]

                # CR√çTICO: Detecci√≥n correcta de tipos pandas
                es_numero = (isinstance(valor_original, (int, float)) or
                           isinstance(valor_original, (np.integer, np.floating)))

                # Si encontramos un valor sin [valor], buscar cu√°ntas celdas [valor] le siguen
                if ((isinstance(valor_original, str) and
                     not valor_original.startswith('[') and
                     valor_original != "") or
                    (es_numero and valor_original != 0)):

                    # Contar cu√°ntas celdas consecutivas tienen [valor_original]
                    span_count = 1
                    valor_a_buscar = f"[{valor_original}]"

                    for k in range(j + 1, len(datos_originales.columns)):
                        siguiente_valor = datos_originales.iloc[i, k]
                        if (isinstance(siguiente_valor, str) and
                            siguiente_valor == valor_a_buscar):
                            span_count += 1
                        else:
                            break

                    # Si hay m√°s de 1 celda, combinar
                    if span_count > 1:
                        self.parent.tabla_proceso.setSpan(i, j, 1, span_count)

                        # üé® CR√çTICO: Color especial para celdas combinadas
                        item = self.parent.tabla_proceso.item(i, j)
                        if item:
                            from PyQt5.QtGui import QColor
                            if es_numero:
                                # AMARILLO m√°s expl√≠cito para n√∫meros
                                item.setBackground(QColor(255, 255, 0))  # Amarillo puro
                            else:
                                # CYAN m√°s expl√≠cito para texto
                                item.setBackground(QColor(0, 255, 255))  # Cyan puro

                    j += span_count
                else:
                    j += 1

    def llenar_tabla(self, table, dataframe, headers=None, nombre="Tabla"):
        """
        MOVIDO DESDE main.py l√≠neas 686-717
        Llenar una tabla con datos (para tabs de datos) usando configuraci√≥n centralizada.

        ‚ö†Ô∏è FUNCIONALIDAD CR√çTICA:
        - Sombreado gris para marcadores [valor]
        - Llamada a aplicar_combinacion_celdas para vista combinada
        - Headers din√°micos seg√∫n contexto
        """
        print(f"   üìã Llenando {nombre}...")

        # Configurar dimensiones
        filas, columnas = dataframe.shape
        table.setRowCount(filas)
        table.setColumnCount(columnas)

        # Configurar encabezados din√°micos
        if headers is None:
            # Determinar contexto autom√°ticamente
            if columnas == 19:
                headers = get_headers_for_context('numeric')  # H-Z para datos num√©ricos
            else:
                headers = get_headers_for_context('excel')    # A-Z para datos completos

        table.setHorizontalHeaderLabels(headers[:columnas])

        # Llenar datos
        for i in range(filas):
            for j in range(columnas):
                valor = dataframe.iloc[i, j]
                item = QTableWidgetItem(str(valor) if valor is not None else "")

                # CR√çTICO: Estilo para celdas combinadas (solo en vista con marcadores)
                if isinstance(valor, str) and valor.startswith('[') and valor.endswith(']'):
                    from PyQt5.QtGui import QColor
                    color_hex = self.colors_config['marker_background']
                    item.setBackground(QColor(color_hex))

                table.setItem(i, j, item)

        # Si es la vista combinada, aplicar combinaci√≥n real de celdas
        if "Combinada" in nombre:
            # MICRO-PASO 4.2: Usar m√©todo local en lugar del de main.py
            self.aplicar_combinacion_celdas(table, dataframe)

        # Ajustar columnas
        table.resizeColumnsToContents()

        print(f"   ‚úÖ {nombre} llenada: {filas}x{columnas}")

    def aplicar_combinacion_celdas(self, table, dataframe):
        """
        MOVIDO DESDE main.py l√≠neas 722-770 - M√âTODO CR√çTICO
        Aplicar combinaci√≥n real de celdas en PyQt (para tabs)

        ‚ö†Ô∏è FUNCIONALIDAD CR√çTICA:
        - Colores cyan/amarillo para celdas combinadas
        - Detecci√≥n correcta de tipos pandas
        - Algoritmo de combinaci√≥n de celdas
        - Debug detallado de combinaciones
        """
        print("   üîó Aplicando combinaci√≥n de celdas...")

        # Analizar datos originales (con marcadores) para saber qu√© combinar
        datos_originales = self.parent.datos_crudos

        for i in range(len(datos_originales)):
            j = 0
            while j < len(datos_originales.columns):
                valor_original = datos_originales.iloc[i, j]

                # CR√çTICO: Detecci√≥n correcta de tipos pandas
                es_numero = (isinstance(valor_original, (int, float)) or
                           isinstance(valor_original, (np.integer, np.floating)))

                # Si encontramos un valor sin [valor] (texto o n√∫mero), buscar cu√°ntas celdas [valor] le siguen
                if ((isinstance(valor_original, str) and
                     not valor_original.startswith('[') and
                     valor_original != "") or
                    (es_numero and valor_original != 0)):

                    # Contar cu√°ntas celdas consecutivas tienen [valor_original]
                    span_count = 1
                    valor_a_buscar = f"[{valor_original}]"

                    for k in range(j + 1, len(datos_originales.columns)):
                        siguiente_valor = datos_originales.iloc[i, k]
                        if (isinstance(siguiente_valor, str) and
                            siguiente_valor == valor_a_buscar):
                            span_count += 1
                        else:
                            break

                    # Si hay m√°s de 1 celda, combinar
                    if span_count > 1:
                        tipo_valor = "N√öMERO" if es_numero else "TEXTO"
                        print(f"     üîó Combinando {tipo_valor} fila {i}, columnas {j}-{j+span_count-1}: '{valor_original}' (span={span_count})")
                        table.setSpan(i, j, 1, span_count)

                        # üé® CR√çTICO: Actualizar el contenido de la celda combinada
                        item = table.item(i, j)
                        if item:
                            from PyQt5.QtGui import QColor
                            # Color diferente para n√∫meros vs texto
                            if es_numero:
                                # AMARILLO m√°s expl√≠cito para n√∫meros combinados
                                item.setBackground(QColor(255, 255, 0))  # Amarillo puro
                            else:
                                # CYAN m√°s expl√≠cito para texto combinado
                                item.setBackground(QColor(0, 255, 255))  # Cyan puro

                    j += span_count
                else:
                    j += 1

        print("   ‚úÖ Combinaci√≥n de celdas aplicada")

        # üé® APLICAR COLORES DESPU√âS DE COMBINACI√ìN
        self._aplicar_colores_criticos_finales()
    
    def _validar_funcionalidad_critica(self):
        """
        M√©todo de validaci√≥n para asegurar que la funcionalidad cr√≠tica funciona.
        Se ejecutar√° despu√©s de cada m√©todo movido.
        """
        print("üîç Validando funcionalidad cr√≠tica...")
        
        # Verificar que parent tiene las propiedades necesarias
        required_attrs = ['tabla_proceso', 'datos_crudos']
        for attr in required_attrs:
            if not hasattr(self.parent, attr):
                raise AttributeError(f"‚ùå Parent no tiene atributo cr√≠tico: {attr}")
        
        print("‚úÖ Funcionalidad cr√≠tica validada")
        return True

    def _configurar_por_paso(self, nombre_paso):
        """
        Configuraci√≥n espec√≠fica seg√∫n el paso del proceso.

        üéØ OPTIMIZACI√ìN ESPECIAL PARA PASO 2
        """
        if "Reorganizada" in nombre_paso:  # Paso 2
            # Configuraci√≥n para Paso 2: m√°s compacto
            self.parent.tabla_proceso.setFont(QFont("Segoe UI", 8))
            print("üé® Configuraci√≥n compacta aplicada para Paso 2")
        elif "Excel Original" in nombre_paso:  # Paso 1
            # Configuraci√≥n para Paso 1: m√°s legible
            self.parent.tabla_proceso.setFont(QFont("Segoe UI", 10))
            print("üé® Configuraci√≥n legible aplicada para Paso 1")
        else:  # Paso 3
            # Configuraci√≥n para Paso 3: enfoque en n√∫meros
            self.parent.tabla_proceso.setFont(QFont("Consolas", 9))
            print("üé® Configuraci√≥n num√©rica aplicada para Paso 3")

    def _optimizar_texto_celda(self, valor, nombre_paso):
        """
        Optimizar texto de celda seg√∫n el paso.

        üîß ESPECIAL PARA PASO 2: Truncar valores repetidos [valor]
        """
        if "Reorganizada" in nombre_paso and isinstance(valor, str):
            if valor.startswith('[') and valor.endswith(']'):
                # Truncar valores largos en Paso 2
                if len(valor) > 15:
                    return valor[:12] + "...]"
                return valor
            return str(valor)

        # Para otros pasos, mostrar valor completo
        return str(valor) if valor is not None else ""

    def _ajustar_columnas_por_paso(self, nombre_paso):
        """
        Ajustar anchos de columnas seg√∫n el paso.

        üéØ PASO 2: Anchos m√°s peque√±os para mejor visualizaci√≥n
        """
        if "Reorganizada" in nombre_paso:  # Paso 2
            # Anchos m√°s peque√±os para Paso 2
            for i in range(self.parent.tabla_proceso.columnCount()):
                self.parent.tabla_proceso.setColumnWidth(i, 60)
            print("üé® Anchos compactos aplicados para Paso 2")
        elif "Excel Original" in nombre_paso:  # Paso 1
            # Ajuste autom√°tico para Paso 1
            self.parent.tabla_proceso.resizeColumnsToContents()
            print("üé® Ajuste autom√°tico aplicado para Paso 1")
        else:  # Paso 3
            # Anchos optimizados para n√∫meros
            self.parent.tabla_proceso.resizeColumnsToContents()
            # Ancho m√≠nimo para n√∫meros
            for i in range(self.parent.tabla_proceso.columnCount()):
                if self.parent.tabla_proceso.columnWidth(i) < 50:
                    self.parent.tabla_proceso.setColumnWidth(i, 50)
            print("üé® Anchos num√©ricos aplicados para Paso 3")

    def _aplicar_colores_criticos_finales(self):
        """
        Aplicar colores cr√≠ticos al final con m√°xima prioridad.

        üéØ SOLUCI√ìN DEFINITIVA para preservar colores cyan/amarillo/gris
        """
        from PyQt5.QtGui import QColor

        tabla = self.parent.tabla_proceso

        # Recorrer todas las celdas y aplicar colores seg√∫n marcadores
        for i in range(tabla.rowCount()):
            for j in range(tabla.columnCount()):
                item = tabla.item(i, j)
                if item:
                    texto = item.text()

                    # üîç PASO 2: Sombreado gris para marcadores [valor]
                    if isinstance(texto, str) and texto.startswith('[') and texto.endswith(']'):
                        color_hex = self.colors_config['marker_background']
                        item.setBackground(QColor(color_hex))  # Gris para [valor]
                        print(f"üé® Gris aplicado en ({i},{j}): {texto[:20]}...")

                    # üîç PASO 1: Verificar si la celda est√° combinada (span > 1)
                    span_row = tabla.rowSpan(i, j)
                    span_col = tabla.columnSpan(i, j)

                    if span_row > 1 or span_col > 1:
                        # Es una celda combinada, aplicar cyan o amarillo
                        try:
                            # Verificar si es n√∫mero
                            float(texto.replace(',', ''))
                            item.setBackground(QColor(255, 255, 0))  # Amarillo para n√∫meros
                            print(f"üé® Amarillo aplicado en ({i},{j}): {texto}")
                        except (ValueError, AttributeError):
                            item.setBackground(QColor(0, 255, 255))  # Cyan para texto
                            print(f"üé® Cyan aplicado en ({i},{j}): {texto}")

        print("‚úÖ Colores cr√≠ticos aplicados al final")
