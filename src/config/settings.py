import os

# Configuraciones de rutas y archivos (rutas relativas al directorio ra√≠z del proyecto)
def get_project_root():
    """Obtiene la ruta ra√≠z del proyecto de forma segura"""
    return os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

def get_absolute_path(relative_path):
    """Convierte una ruta relativa a absoluta basada en la ra√≠z del proyecto"""
    return os.path.join(get_project_root(), relative_path)

# ‚úÖ CONFIGURACI√ìN LEGACY ELIMINADA - Ahora se usa configuraci√≥n din√°mica por modo

# ‚úÖ CONFIGURACI√ìN LEGACY ELIMINADA - Ahora se usa ui_config.py para interfaz

# üéØ CONFIGURACI√ìN POR MODO DE OPERACI√ìN
# =====================================

# üè´ CONFIGURACI√ìN MODO ESCUELAS
ESCUELAS_CONFIG = {
    "HOJA_DATOS": "ESC2",
    "RANGO_DATOS": "A5:Z17",
    "RANGO_INYECCION": "H6:Z14",  # ‚úÖ Rango correcto para ZONA
    "HOJA_INYECCION": "ZONA3",  # ‚úÖ Exportar a hoja ZONA 3
    "CONCEPTOS": [
        "INSCRIPCI√ìN",
        "BAJAS",
        "EXISTENCIA",
        "ALTAS",
        "APROBADOS",
        "REPROBADOS",
        "BECADOS MUNICIPIO",
        "BECADOS SEED",
        "BIENESTAR",
        "GRUPOS"
    ],
    "PLANTILLA": "FORMATO FIN DE CICLO ZONA.xlsx",  # ‚úÖ Plantilla correcta
    "VALIDACION_COMPLETA": True,
    "CREAR_BACKUP": False  # ‚úÖ No crear backup autom√°tico
}

# üåç CONFIGURACI√ìN MODO ZONAS
ZONAS_CONFIG = {
    "HOJA_DATOS": "ZONA3",
    "RANGO_DATOS": "A3:Z14",
    "RANGO_INYECCION": "H6:Z14",
    "HOJA_INYECCION": "ZONA 3",  # ‚úÖ Hoja espec√≠fica para inyecci√≥n
    "CONCEPTOS": [
        "PREINSCRIPCI√ìN 1ER. GRADO",
        "INSCRIPCI√ìN",
        "BAJAS",
        "EXISTENCIA",
        "ALTAS",
        "BECADOS MUNICIPIO",
        "BECADOS SEED",
        "BIENESTAR",
        "GRUPOS"
    ],
    "PLANTILLA": "FORMATO FIN DE CICLO ZONA.xlsx",  # ‚úÖ Plantilla correcta
    "VALIDACION_COMPLETA": True,
    "CREAR_BACKUP": False  # ‚úÖ No crear backup autom√°tico
}

# üèõÔ∏è CONFIGURACI√ìN MODO SECTORES
SECTORES_CONFIG = {
    "HOJA_DATOS": "SECTOR3",
    "RANGO_DATOS": "A3:Z14",
    "RANGO_INYECCION": "H6:Z14",
    "CONCEPTOS": [
        "PREINSCRIPCI√ìN 1ER. GRADO",
        "INSCRIPCI√ìN",
        "BAJAS",
        "EXISTENCIA",
        "ALTAS",
        "BECADOS MUNICIPIO",
        "BECADOS SEED",
        "BIENESTAR",
        "GRUPOS"
    ],
    "PLANTILLA": "FORMATO FIN DE CICLO ZONA.xlsx",
    "VALIDACION_COMPLETA": False  # Solo sumatoria
}

# Variables globales para configuraci√≥n activa
MODO_ACTUAL = "ZONAS"  # Por defecto
CONFIG_ACTUAL = ZONAS_CONFIG.copy()

def configurar_modo(modo):
    """
    Configurar el sistema para un modo espec√≠fico.

    Args:
        modo (str): "ESCUELAS", "ZONAS", o "SECTORES"
    """
    global MODO_ACTUAL, CONFIG_ACTUAL

    if modo == "ESCUELAS":
        CONFIG_ACTUAL = ESCUELAS_CONFIG.copy()
    elif modo == "ZONAS":
        CONFIG_ACTUAL = ZONAS_CONFIG.copy()
    elif modo == "SECTORES":
        CONFIG_ACTUAL = SECTORES_CONFIG.copy()
    else:
        raise ValueError(f"Modo no v√°lido: {modo}")

    MODO_ACTUAL = modo
    print(f"üéØ Configuraci√≥n actualizada para modo: {modo}")
    print(f"   üìã Hoja: {CONFIG_ACTUAL['HOJA_DATOS']}")
    print(f"   üìä Rango: {CONFIG_ACTUAL['RANGO_DATOS']}")
    print(f"   üéØ Conceptos: {len(CONFIG_ACTUAL['CONCEPTOS'])}")

    return CONFIG_ACTUAL

def get_config_actual():
    """Obtener la configuraci√≥n activa actual."""
    return CONFIG_ACTUAL.copy()